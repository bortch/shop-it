{"version":3,"sources":["util/pagingUtils.ts","components/PaginationControls.tsx","components/ResultsPane.tsx","util/numberUtils.ts","harmonization/harmonize.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["pageGetResultStartIndex","pageIndex","pageSize","pageGetResultEndIndex","numResults","Math","min","PAGE_SIZE_OPTIONS","PaginationControls","handleStartButtonClick","props","onPageChange","handlePrevButtonClick","handleNextButtonClick","handleEndButtonClick","getNumPages","handlePageSizeChange","e","onPageSizeChange","target","value","handleNumericInputChange","renderPageSizeOption","key","this","withBottomMargin","numPages","isPrevDisabled","isNextDisabled","resultsStartIndex","resultsEndIndexExclusive","className","classNames","disabled","icon","onClick","buttonPosition","fill","max","minorStepSize","onValueChange","renderPageSizeSelector","onChange","map","ceil","React","DEFAULT_PAGE_SIZE","ResultsPane","state","renderResultItem","result","index","resultAbsoluteIndex","resultStr","c","name","join","chordNames","i","elements","length","push","handlePageChange","setState","results","pageStart","pageEndExclusive","pageResultItems","slice","isAre","ways","integer","reversedDigits","toString","split","reverse","reversedResult","formatInteger","renderPaginationControls","undefined","Chord","C","pitches","C7","Csharp7","Dm7","D7","Dsharp7","Em7","E7","F7","Fsharp7","G7","Gsharp7","Am7","A7","Asharp7","Bb7","B7","RootDeparturesRules","CircleOfFifthsRules","HalfStepStrictRules","HalfStepLooseRules","WholeStepRules","DeceptiveCadenceRules","MinorThirdRules","MajorThirdRules","TritoneSubstitutionRules","PerfectFourthRules","basicRules","allRules","ValidFirstChords","Set","p2c","Map","c2c_all","c2c_basic","buildC2CMap","rules","c2c","Object","values","chord","set","from","to","get","add","harmonize","melodyNotes","harmonizeRec","chordsSoFar","circleOfFifthsOnly","out","firstMelodyNote","chordsWithPitch","pitch","isMelodyNoteString","chordsFromPrev","chords","getChordsFollowingFinalChord","chordsToConsider","setIntersect","remainingMelodyNotes","has","sort","chordListComparator","a","b","forEach","minLength","chordA","chordB","melodyNote","buildP2CMap","KeyCodes","ENTER","PITCH_INPUT_REGEX","App","melodyInput","showMelodyLengthWarning","circleOfFifthsFlagEnable","circleOfFifthsFlagDisable","handleMelodyInputChange","getSanitizedMelodyInput","changeMelodyInput","handleMelodyInputKeyDown","which","handleButtonClick","melody","parseMelodyNotes","helperText","renderExampleListItem","href","intent","Intent","WARNING","NONE","large","onKeyDown","placeholder","rightElement","renderSearchBarRightElement","Classes","FIXED","PRIMARY","maybeRenderResults","title","needsAllProgressions","buttonText","content","active","text","renderHarmonizationOptionsMenuText","position","Position","BOTTOM_RIGHT","minimal","rightIcon","melodyString","tokens","match","toUpperCase","chordName","replace","PureComponent","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d1978670.chunk.js","sourcesContent":["\nexport function pageGetResultStartIndex(pageIndex: number, pageSize: number) {\n    return pageIndex * pageSize;\n}\n\nexport function pageGetResultEndIndex(pageIndex: number, pageSize: number, numResults: number) {\n    return Math.min(numResults, pageIndex * pageSize + pageSize);\n}","import { ButtonGroup, Button, NumericInput } from \"@blueprintjs/core\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { pageGetResultStartIndex, pageGetResultEndIndex } from \"../util/pagingUtils\";\n\nconst PAGE_SIZE_OPTIONS: number[] = [10, 25, 50, 100];\n\nexport interface IPaginationControlsProps {\n  numResults: number;\n  pageIndex: number;\n  pageSize: number;\n  onPageChange: (pageIndex: number) => void;\n  onPageSizeChange: (pageSize: number) => void;\n  /** @default true */\n  withBottomMargin?: boolean;\n}\n\nexport class PaginationControls extends React.PureComponent<IPaginationControlsProps> {\n  public render() {\n    const { numResults, pageIndex, pageSize, withBottomMargin } = this.props;\n\n    const numPages = this.getNumPages();\n\n    const isPrevDisabled = pageIndex === 0;\n    const isNextDisabled = pageIndex === numPages - 1;\n\n    const resultsStartIndex = pageGetResultStartIndex(pageIndex, pageSize);\n    const resultsEndIndexExclusive = pageGetResultEndIndex(pageIndex, pageSize, numResults);\n\n    return (\n      <div className={classNames(\"hz-pagination-controls\", { \"-with-bottom-margin\": withBottomMargin })}>\n        <div className=\"hz-pagination-controls-left\">\n          <ButtonGroup>\n            <Button disabled={isPrevDisabled} icon=\"chevron-backward\" onClick={this.handleStartButtonClick} />\n            <Button disabled={isPrevDisabled} onClick={this.handlePrevButtonClick}>Prev</Button>\n          </ButtonGroup>\n          <NumericInput\n            buttonPosition=\"none\"\n            className=\"hz-pagination-controls-stepper\"\n            fill={true}\n            min={1}\n            max={numPages}\n            minorStepSize={null}\n            onValueChange={this.handleNumericInputChange}\n            // 1-indexed for display\n            value={this.props.pageIndex + 1}\n          />\n          <ButtonGroup>\n            <Button disabled={isNextDisabled} onClick={this.handleNextButtonClick}>Next</Button>\n            <Button disabled={isNextDisabled} icon=\"chevron-forward\" onClick={this.handleEndButtonClick} />\n          </ButtonGroup>\n          <div className=\"hz-pagination-controls-text\">\n            {/* 1-indexed */}\n            Showing {resultsStartIndex + 1} through {resultsEndIndexExclusive} <em>(sorted lexicographically)</em>\n          </div>\n        </div>\n        <div className=\"hz-pagination-controls-right\">\n          {this.renderPageSizeSelector()}\n        </div>\n      </div>\n    );\n  }\n\n  private handleStartButtonClick = () => this.props.onPageChange(0);\n  private handlePrevButtonClick = () => this.props.onPageChange(this.props.pageIndex - 1);\n  private handleNextButtonClick = () => this.props.onPageChange(this.props.pageIndex + 1);\n  private handleEndButtonClick = () => this.props.onPageChange(this.getNumPages() - 1);\n\n  private handlePageSizeChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    this.props.onPageSizeChange(+e.target.value);\n  }\n\n  private handleNumericInputChange = (value: number) => {\n    // The value will be 1-indexed, but the parent expects it to be 0-indexed.\n    this.props.onPageChange(value - 1);\n  };\n\n  private renderPageSizeSelector() {\n    return (\n      <label className=\"hz-pagination-controls-page-size\">\n        <div className=\"hz-pagination-controls-page-size-text\">Page size:</div>\n        <div className=\"hz-pagination-controls-page-size-selector bp3-select \">\n          <select onChange={this.handlePageSizeChange} value={this.props.pageSize}>\n            {PAGE_SIZE_OPTIONS.map(this.renderPageSizeOption)}\n          </select>\n        </div>\n      </label>\n    );\n  }\n\n  private renderPageSizeOption = (value: number) => {\n    return <option key={value} value={value}>{value}</option>\n  };\n\n  private getNumPages() {\n    return Math.ceil(this.props.numResults / this.props.pageSize);\n  }\n}","import * as React from \"react\";\nimport { Card } from \"@blueprintjs/core\";\nimport { IChord } from \"../harmonization/harmonize\";\nimport { formatInteger } from \"../util/numberUtils\";\nimport { pageGetResultStartIndex, pageGetResultEndIndex } from \"../util/pagingUtils\";\nimport { PaginationControls } from \"./PaginationControls\";\n\nconst DEFAULT_PAGE_SIZE = 50;\n\nexport interface IResultsPaneProps {\n  results: IChord[][];\n}\n\nexport interface IResultsPaneState {\n  pageIndex: number;\n  pageSize: number;\n}\n\nexport class ResultsPane extends React.PureComponent<IResultsPaneProps, IResultsPaneState> {\n  public state: IResultsPaneState = {\n    pageIndex: 0,\n    pageSize: DEFAULT_PAGE_SIZE,\n  };\n\n  public render() {\n    const { results } = this.props;\n    const { pageIndex, pageSize } = this.state;\n\n    if (results.length === 0) {\n      return (\n        <Card>\n          <p>\n            <strong>No harmonizations found!</strong>\n          </p>\n          <p>\n            This doesn't mean there's no way to harmonize this line&mdash;it just means that no progression was found using the limited rules defined in this app.\n          </p>\n        </Card>\n      )\n    }\n\n    const pageStart = pageGetResultStartIndex(pageIndex, pageSize);\n    const pageEndExclusive = pageGetResultEndIndex(pageIndex, pageSize, results.length);\n\n    const pageResultItems = results.slice(pageStart, pageEndExclusive).map(this.renderResultItem);\n\n    const isAre = pageResultItems.length === 1 ? \"is\" : \"are\";\n    const ways = pageResultItems.length === 1 ? \"way\" : \"ways\";\n\n    return (\n      <Card>\n        <p><strong>Here {isAre} {formatInteger(results.length)} {ways} to harmonize this melody.</strong></p>\n        {this.renderPaginationControls()}\n        <div className=\"hz-chord-results\">\n          {pageResultItems}\n        </div>\n        {this.renderPaginationControls(false)}\n      </Card>\n    );\n  }\n\n  private renderResultItem = (result: IChord[], index: number) => {\n    const { pageIndex, pageSize } = this.state;\n\n    const resultAbsoluteIndex = pageGetResultStartIndex(pageIndex, pageSize) + index;\n\n    const resultStr = result.map(c => c.name).join(\" \");\n    const chordNames = result.map((c, i) => <span key={i} className=\"hz-chord-name\">{c.name}</span>);\n\n    const elements = [];\n    for (let i = 0; i < chordNames.length; i++) {\n      if (i > 0) {\n        elements.push(<span key={i + 0.5} className=\"hz-chord-arrow\">→</span>)\n      }\n      elements.push(chordNames[i]);\n    }\n\n    return (\n      <div className=\"hz-chord-result\" key={resultStr}>\n        {/* 1-indexed */}\n        <div className=\"hz-chord-result-id\">#{resultAbsoluteIndex + 1}</div>\n        {elements}\n      </div>\n    );\n  }\n\n  private renderPaginationControls(withBottomMargin = true) {\n    const { results } = this.props;\n    const { pageIndex, pageSize } = this.state;\n\n    if (results === undefined) {\n      return undefined;\n    }\n\n    return (\n      <PaginationControls\n        numResults={results.length}\n        pageIndex={pageIndex}\n        pageSize={pageSize}\n        onPageChange={this.handlePageChange}\n        onPageSizeChange={this.handlePageSizeChange}\n        withBottomMargin={withBottomMargin}\n      />\n    );\n  }\n\n  private handlePageChange = (pageIndex: number) => this.setState({ pageIndex });\n  private handlePageSizeChange = (pageSize: number) => this.setState({ pageSize });\n}","\nexport function formatInteger(integer: number): string {\n    const reversedDigits = integer.toString().split(\"\").reverse();\n    const reversedResult: string[] = [];\n    for (let i = 0; i < reversedDigits.length; i++) {\n        if (i > 0 && i % 3 === 0) {\n            reversedResult.push(\",\");\n        }\n        reversedResult.push(reversedDigits[i]);\n    }\n    return reversedResult.reverse().join(\"\");\n}\n","\nexport type Pitch = \"C\" | \"C#\" | \"D\" | \"D#\" | \"E\" | \"F\" | \"F#\" | \"G\" | \"G#\" | \"Ab\" | \"A\" | \"A#\" | \"Bb\" | \"B\" | \"C\";\nexport type ChordName = \"C\" | \"C7\" | \"Csharp7\" | \"Dm7\" | \"D7\" | \"Dsharp7\" | \"Em7\" | \"E7\" | \"F7\" | \"Fsharp7\" | \"G7\" | \"Gsharp7\" | \"A7\" | \"Am7\" | \"Asharp7\" | \"Bb7\" | \"B7\";\n\ntype IChordProgressionBigram = [IChord, IChord];\n\nexport interface IChord {\n    pitches: Pitch[]; // stored in sorted order\n    name: string; // e.g. Gm7\n}\n\nexport type MelodyNote = Pitch | {\n    pitch: Pitch;\n    chord?: IChord;\n}\n\nexport const Chord: Record<ChordName, IChord> = {\n    C: {\n        pitches: [\"C\", \"E\", \"G\"],\n        name: \"C\",\n    },\n    C7: {\n        pitches: [\"C\", \"E\", \"G\", \"Bb\"],\n        name: \"C7\",\n    },\n    Csharp7: {\n        pitches: [\"C#\", \"F\" /* E#. TODO: Enharmonic spelling. */, \"G#\", \"B\"],\n        name: \"C#7\",\n    },\n    Dm7: {\n        pitches: [\"D\", \"F\", \"A\", \"C\"],\n        name: \"Dm7\",\n    },\n    D7: {\n        pitches: [\"D\", \"F#\", \"A\", \"C\"],\n        name: \"D7\",\n    },\n    Dsharp7: {\n        pitches: [\"D#\", \"G\" /* F## */, \"A#\", \"C#\"],\n        name: \"D#7\",\n    },\n    Em7: {\n        pitches: [\"E\", \"G\", \"B\", \"D\"],\n        name: \"Em7\",\n    },\n    E7: {\n        pitches: [\"E\", \"G#\", \"B\", \"D\"],\n        name: \"E7\",\n    },\n    F7: {\n        pitches: [\"F\", \"A\", \"C\", \"Bb\"],\n        name: \"F7\",\n    },\n    Fsharp7: {\n        pitches: [\"F#\", \"A#\", \"C#\", \"E\"],\n        name: \"F#7\",\n    },\n    G7: {\n        pitches: [\"G\", \"B\", \"D\", \"F\"],\n        name: \"G7\",\n    },\n    Gsharp7: {\n        pitches: [\"G#\", \"C\" /* B# */, \"D#\", \"F#\"],\n        name: \"G#7\",\n    },\n    Am7: {\n        pitches: [\"A\", \"C\", \"E\", \"G\"],\n        name: \"Am7\",\n    },\n    A7: {\n        pitches: [\"A\", \"C#\", \"E\", \"G\"],\n        name: \"A7\",\n    },\n    Asharp7: {\n        pitches: [\"A#\", \"D\" /* C## */, \"F\" /** E# */, \"G#\"],\n        name: \"A#7\",\n    },\n    Bb7: {\n        pitches: [\"Bb\", \"D\", \"F\", \"Ab\"],\n        name: \"Bb7\",\n    },\n    B7: {\n        pitches: [\"B\", \"D#\", \"F#\", \"A\"],\n        name: \"B7\",\n    },\n};\n\ntype RulesList = IChordProgressionBigram[];\n\n/**\n * Assuming C Major, you can go pretty much anywhere from a C major chord.\n */\nconst RootDeparturesRules: RulesList = [\n    [Chord.C, Chord.C7],\n    [Chord.C, Chord.Dm7],\n    [Chord.C, Chord.D7],\n    [Chord.C, Chord.Em7],\n    [Chord.C, Chord.E7],\n    [Chord.C, Chord.F7],\n    [Chord.C, Chord.Fsharp7],\n    [Chord.C, Chord.G7],\n    [Chord.C, Chord.Am7],\n    [Chord.C, Chord.A7],\n    [Chord.C, Chord.Bb7],\n    [Chord.C, Chord.B7],\n];\n\n/**\n * Follow the circle of fifths. Secondary dominants always resolve to their\n * corresponding root. Allow for both Mm7 (dominant 7) and m7 variants.\n*/\nconst CircleOfFifthsRules: RulesList = [\n    //   (V7 -> V7)\n    [Chord.C7, Chord.F7],\n    [Chord.F7, Chord.Bb7],\n    [Chord.Bb7, Chord.Asharp7], // HACKHACK: Handle enharmonically identical chords.\n    [Chord.Asharp7, Chord.Bb7],\n    [Chord.Asharp7, Chord.Dsharp7],\n    [Chord.Dsharp7, Chord.Gsharp7],\n    [Chord.Gsharp7, Chord.Csharp7],\n    [Chord.Csharp7, Chord.Fsharp7],\n    [Chord.Fsharp7, Chord.B7],\n    [Chord.B7, Chord.E7],\n    [Chord.E7, Chord.A7],\n    [Chord.A7, Chord.D7],\n    [Chord.D7, Chord.G7],\n    [Chord.G7, Chord.C],\n    [Chord.G7, Chord.C7],\n\n    //   (v7 -> V7)\n    [Chord.Am7, Chord.D7],\n    [Chord.Dm7, Chord.G7],\n    [Chord.Em7, Chord.A7],\n\n    //   (v7 -> v7)\n    [Chord.Em7, Chord.Am7],\n\n    //   (V7 -> v7)\n    [Chord.A7, Chord.Dm7],\n];\n\n/**\n * Rise and fall by a half step to handle tricky half-step motion in the melody.\n*/\nconst HalfStepStrictRules: RulesList = [\n    [Chord.Dsharp7, Chord.D7],\n    [Chord.Dsharp7, Chord.Dm7],\n    [Chord.F7, Chord.Fsharp7],\n    [Chord.Fsharp7, Chord.F7],\n    [Chord.Fsharp7, Chord.G7],\n    [Chord.Bb7, Chord.B7],\n    [Chord.B7, Chord.C],\n    [Chord.B7, Chord.C7],\n];\n\n/**\n * Half-step motions that should only be used in a pinch. Enabling all of these\n * may pollute the results too much, so they're disabled by default.\n*/\nconst HalfStepLooseRules: RulesList = [\n    [Chord.C7, Chord.Csharp7],\n    [Chord.Csharp7, Chord.D7],\n    [Chord.D7, Chord.Dsharp7],\n    [Chord.Dsharp7, Chord.E7],\n    [Chord.E7, Chord.F7],\n    [Chord.F7, Chord.Fsharp7],\n    [Chord.Fsharp7, Chord.G7],\n    [Chord.G7, Chord.Gsharp7],\n    [Chord.Gsharp7, Chord.A7],\n    [Chord.A7, Chord.Asharp7],\n    [Chord.A7, Chord.Bb7], // HACKHACK: Enharmonic equivalent\n];\n\n/**\n * Whole step motions. These are particularly useful to and from the tonic.\n*/\nconst WholeStepRules: RulesList = [\n    [Chord.C, Chord.D7],\n    [Chord.Bb7, Chord.C],\n    [Chord.Bb7, Chord.C7],\n    [Chord.D7, Chord.C],\n    [Chord.D7, Chord.C7],\n    // This is also seen on occasion, but is omitted for now to reduce noise:\n    // [Chord.F7, Chord.G7],\n];\n\nconst DeceptiveCadenceRules: RulesList = [\n    [Chord.G7, Chord.Am7],\n];\n\nconst MinorThirdRules: RulesList = [\n    [Chord.Am7, Chord.C],\n    [Chord.Am7, Chord.C7],\n];\n\nconst MajorThirdRules: RulesList = [\n    [Chord.G7, Chord.B7],\n];\n\nconst TritoneSubstitutionRules: RulesList = [\n    [Chord.C7, Chord.Fsharp7],\n    [Chord.Csharp7, Chord.G7],\n    [Chord.D7, Chord.Gsharp7],\n    [Chord.Dsharp7, Chord.A7],\n    [Chord.E7, Chord.Asharp7],\n    [Chord.E7, Chord.Bb7], // HACKHACK: Enharmonic equivalent\n    [Chord.F7, Chord.B7],\n    [Chord.Fsharp7, Chord.C],\n    [Chord.Fsharp7, Chord.C7],\n    [Chord.G7, Chord.Csharp7],\n    [Chord.Gsharp7, Chord.D7],\n    [Chord.A7, Chord.Dsharp7],\n    [Chord.Asharp7, Chord.E7],\n    [Chord.Bb7, Chord.E7], // HACKHACK: Enharmonic equivalent\n    [Chord.B7, Chord.F7],\n];\n\nconst PerfectFourthRules: RulesList = [\n    [Chord.F7, Chord.C7],\n];\n\nconst basicRules: IChordProgressionBigram[] = [\n    ...RootDeparturesRules,\n    ...CircleOfFifthsRules,\n];\n\nconst allRules: IChordProgressionBigram[] = [\n    ...RootDeparturesRules,\n    ...CircleOfFifthsRules,\n    ...DeceptiveCadenceRules,\n    ...HalfStepStrictRules,\n    ...HalfStepLooseRules, // Disabled by default;\n    ...WholeStepRules,\n    ...MinorThirdRules,\n    ...MajorThirdRules,\n    ...PerfectFourthRules,\n    ...TritoneSubstitutionRules,\n];\n\nconst ValidFirstChords = new Set<IChord>([Chord.C, Chord.Am7, Chord.G7]);\n\nlet p2c: Map<string, Set<IChord>> = new Map();\nlet c2c_all: Map<string, Set<IChord>> = new Map();\nlet c2c_basic: Map<string, Set<IChord>> = new Map();\n\nfunction buildP2CMap() {\n    for (const chord of Object.values(Chord)) {\n        for (const pitch of chord.pitches) {\n            if (!p2c.has(pitch)) {\n                p2c.set(pitch, new Set<IChord>());\n            }\n            p2c.get(pitch)!.add(chord);\n        }\n    }\n}\n\nfunction buildC2CMap(rules: IChordProgressionBigram[], c2c: Map<string, Set<IChord>>) {\n    for (const chord of Object.values(Chord)) {\n        // Let every chord progress to itself without an explicit rule.\n        c2c.set(chord.name, new Set([chord]));\n    }\n\n    for (const [from, to] of rules) {\n        c2c.get(from.name)!.add(to);\n    }\n}\n\nbuildP2CMap();\nbuildC2CMap(allRules, c2c_all);\nbuildC2CMap(basicRules, c2c_basic);\n\nexport function harmonize(melodyNotes: MelodyNote[], circleOfFifthsOnly = false): IChord[][] {\n    const result: IChord[][] = [];\n    harmonizeRec(melodyNotes, [], circleOfFifthsOnly, result);\n    return result.sort(chordListComparator);\n}\n\nfunction harmonizeRec(melodyNotes: MelodyNote[], chordsSoFar: IChord[], circleOfFifthsOnly: boolean, out: IChord[][]): void {\n    if (melodyNotes.length === 0) {\n        return;\n    }\n\n    const firstMelodyNote = melodyNotes[0];\n    const firstPitch = isMelodyNoteString(firstMelodyNote) ? firstMelodyNote : firstMelodyNote.pitch;\n\n    const chordsWithPitch = getChordsContainingPitch(firstPitch);\n    const chordsFromPrev = getChordsFollowingFinalChord(chordsSoFar, circleOfFifthsOnly);\n\n    let chordsToConsider = chordsSoFar.length === 0 ? chordsWithPitch : setIntersect(chordsWithPitch, chordsFromPrev);\n    if (!isMelodyNoteString(firstMelodyNote) && firstMelodyNote.chord != null) {\n        chordsToConsider = setIntersect(chordsToConsider, new Set([firstMelodyNote.chord]));\n    }\n\n    if (melodyNotes.length === 1) {\n        for (const c of chordsToConsider) {\n            out.push([...chordsSoFar, c]);\n        }\n    } else {\n        const remainingMelodyNotes = melodyNotes.slice(1);\n        for (const c of chordsToConsider) {\n            if (chordsSoFar.length !== 0 || ValidFirstChords.has(c) || (typeof firstMelodyNote !== \"string\" && c === firstMelodyNote.chord)) {\n                harmonizeRec(remainingMelodyNotes, [...chordsSoFar, c], circleOfFifthsOnly, out);\n            }\n        }\n    }\n}\n\nfunction getChordsContainingPitch(pitch: Pitch): Set<IChord> {\n    return p2c.get(pitch) || new Set();\n}\n\nfunction getChordsFollowingFinalChord(chords: IChord[], circleOfFifthsOnly: boolean): Set<IChord> {\n    if (chords.length === 0) {\n        return new Set();\n    }\n    const c2cMap = circleOfFifthsOnly ? c2c_basic : c2c_all;\n    return c2cMap.get(chords[chords.length - 1].name) || new Set();\n}\n\nfunction setIntersect<T>(a: Set<T>, b: Set<T>) {\n    const result = new Set<T>();\n    a.forEach(value => {\n        if (b.has(value)) {\n            result.add(value);\n        }\n    });\n    return result;\n}\n\nfunction chordListComparator(a: IChord[], b: IChord[]) {\n    const minLength = Math.min(a.length, b.length);\n    // March in lockstep through each list until we find two chords whose names\n    // don't match lexicographically, then use normal tie-breaking logic for\n    // sorting in ascending order.\n    for (let i = 0; i < minLength; i++) {\n        const chordA: string = a[i].name;\n        const chordB: string = b[i].name;\n        if (chordA < chordB) {\n            return -1;\n        } else if (chordA > chordB) {\n            return 1;\n        }\n    }\n    return 0;\n}\n\nfunction isMelodyNoteString(melodyNote: MelodyNote): melodyNote is Pitch {\n    return typeof melodyNote === \"string\";\n}","import React from \"react\";\nimport { InputGroup, FormGroup, ControlGroup, Button, Intent, Classes, Position, Menu, MenuItem, Popover, IconName, Icon } from \"@blueprintjs/core\";\nimport \"./App.scss\";\nimport { ResultsPane } from \"./components/ResultsPane\";\nimport { Pitch, IChord, harmonize, MelodyNote } from \"./harmonization/harmonize\";\nimport { Chord } from \"./harmonization/harmonize\";\n\nconst KeyCodes = {\n  ENTER: 13,\n};\n\nconst DEFAULT_MELODY: Pitch[] = [\"E\", \"D\", \"C\", \"D\", \"E\"];\nconst MAX_MELODY_LENGTH = 15;\nconst PITCH_INPUT_REGEX = /^([A-Ga-g][#b]?)(\\(([A-Ga-g][#b]?(m7|7)?)\\))?$/; // E, F#, C(C), C(Am7)\n\ninterface IAppState {\n  circleOfFifthsOnly: boolean;\n  melodyInput: string;\n  results: IChord[][] | undefined;\n  showMelodyLengthWarning: boolean;\n}\n\nexport class App extends React.PureComponent<{}, IAppState> {\n  public state: IAppState = {\n    circleOfFifthsOnly: true,\n    melodyInput: \"\",\n    results: undefined,\n    showMelodyLengthWarning: false,\n  };\n\n  public render() {\n    const { showMelodyLengthWarning } = this.state;\n    const helperText = showMelodyLengthWarning\n      ? \"Melodies can't be longer than 15 notes.\"\n      : \"Valid pitches are C, C#, D, D#, E, F, F#, G, G#, A, A#, Bb, B, and C. Valid chords are C, C7, C#7, Dm7, D7, D#7, Em7, E7, F7, F#7, G7, G#7, Am7, A7, A#7, Bb7, B7.\";\n    return (\n      <div className=\"hz-app\">\n        <h2>'Shop It: A Simple Barbershop Harmonizer</h2>\n        <p>\n          Enter a sequence of pitches in C Major, then click \"Harmonize\" to see various barbershop chord progressions for that melody.\n        </p>\n        <h3>Examples</h3>\n        <p>\n          <ul>\n            {this.renderExampleListItem(\"Down Our Way\", \"E B A G A E D\", false)}\n            {this.renderExampleListItem(\"Mary Had a Little Lamb\", \"E D C D E E E\", false)}\n            {this.renderExampleListItem(\"Chromatic scale\", \"C C# D D# E F F# G\", true)}\n            {this.renderExampleListItem(\"Santa Fe\", \"G(G7) F E(C) G F E(Am7)\", true)}\n          </ul>\n        </p>\n        <h3>Notes</h3>\n        <ul>\n          <li><strong>Forced chords.</strong> You can force a particular chord for a particular melody note. Just put the chord name in parentheses after the pitch: <code>F#(D7)</code>. Make sure the forced chord actually contains the pitch&mdash;you won't see any validation messages or error messages if not.</li>\n          <li><strong>Progression permissivity.</strong> You can decide whether to allow only basic Circle of Fifths motion (e.g. II7 → V7 → I) or additional progressions as well (e.g. I#7 → I7, tritone substitution). Permitting all progressions will give many more results.</li>\n          <li><strong>Melody length.</strong> For performance reasons, melodies can be at most 15 pitches long. Computating anything longer would likely cook your browser.</li>\n          <li><strong>Letter casing.</strong> Case matters only for chord names (e.g. because AM7 and Am7 are distinct chords). Case does not matter for pitch names.</li>\n          <li><strong>Playing chords.</strong> You can play through progressions using <a href=\"http://cmslewis.github.io/keyano/\" target=\"_blank\">Keyano</a>, a browser-based piano, if you want.</li>\n        </ul>\n        <FormGroup\n          helperText={helperText}\n          intent={showMelodyLengthWarning ? Intent.WARNING : Intent.NONE}\n        >\n          <ControlGroup fill={true}>\n            <InputGroup\n              intent={showMelodyLengthWarning ? Intent.WARNING : Intent.NONE}\n              large={true}\n              onChange={this.handleMelodyInputChange}\n              onKeyDown={this.handleMelodyInputKeyDown}\n              placeholder=\"Enter a melody in C Major...\"\n              rightElement={this.renderSearchBarRightElement()}\n              value={this.state.melodyInput}\n            />\n            <Button\n              className={Classes.FIXED}\n              disabled={showMelodyLengthWarning || this.state.melodyInput.length === 0}\n              intent={showMelodyLengthWarning ? Intent.WARNING : Intent.PRIMARY}\n              icon=\"music\"\n              large={true}\n              onClick={this.handleButtonClick}\n            >\n              Harmonize!\n            </Button>\n          </ControlGroup>\n        </FormGroup>\n        {this.maybeRenderResults()}\n        <div className=\"hz-attribution\">Hastily built by <a href=\"https://www.github.com/cmslewis\" target=\"_blank\">Chris Lewis</a> from Dec 19 - 21, 2019.</div>\n      </div>\n    );\n  }\n\n  private renderExampleListItem(title: string, melodyInput: string, needsAllProgressions: boolean) {\n    const onClick = () => {\n      this.changeMelodyInput(melodyInput);\n      this.setState({ circleOfFifthsOnly: !needsAllProgressions });\n    };\n    return (\n      <li>\n        <strong>{title}:</strong>{\" \"}\n        <code>{melodyInput}</code>{\" \"}\n        <a onClick={onClick}>(Try it)</a>\n      </li >\n    );\n  }\n\n  private renderSearchBarRightElement() {\n    const { circleOfFifthsOnly } = this.state;\n\n    const CIRCLE_TEXT = \"Circle of fifths only\";\n    const ALL_TEXT = \"All progressions\";\n\n    const CIRCLE_ICON: IconName = \"refresh\";\n    const ALL_ICON: IconName = \"layout\";\n\n    const buttonText = circleOfFifthsOnly ? CIRCLE_TEXT : ALL_TEXT;\n\n    return (\n      <Popover\n        content={\n          <Menu className=\"hz-flag-menu\">\n            <MenuItem\n              active={circleOfFifthsOnly}\n              className=\"hz-flag-menu-item\"\n              icon={CIRCLE_ICON}\n              onClick={this.circleOfFifthsFlagEnable}\n              text={this.renderHarmonizationOptionsMenuText(CIRCLE_TEXT, \"Only strict V7 → I progressions will be used. v7 will also be permitted.\")}\n            />\n            <MenuItem\n              active={!circleOfFifthsOnly}\n              className=\"hz-flag-menu-item\"\n              icon={ALL_ICON}\n              onClick={this.circleOfFifthsFlagDisable}\n              text={this.renderHarmonizationOptionsMenuText(ALL_TEXT, \"Other progressions may also be used (e.g. half-step motion, tritone substitutions).\")}\n            />\n          </Menu>\n        }\n        position={Position.BOTTOM_RIGHT}\n      >\n        <Button minimal={true} rightIcon=\"caret-down\">\n          {buttonText}\n        </Button>\n      </Popover>\n    )\n  }\n\n  private circleOfFifthsFlagEnable = () => {\n    this.setState({ circleOfFifthsOnly: true });\n  };\n\n  private circleOfFifthsFlagDisable = () => {\n    this.setState({ circleOfFifthsOnly: false });\n  };\n\n  private renderHarmonizationOptionsMenuText(title: string, helperText: string) {\n    return (\n      <div className=\"hz-flag-menu-item-text\">\n        <div className=\"hz-flag-menu-item-text-title\">{title}</div>\n        <div className=\"hz-flag-menu-item-text-muted\">{helperText}</div>\n      </div>\n    );\n  }\n\n  private handleMelodyInputChange = (e: React.FormEvent<HTMLInputElement>) => {\n    const melodyInput = this.getSanitizedMelodyInput((e.target as HTMLInputElement).value);\n    this.changeMelodyInput(melodyInput);\n  };\n\n  private changeMelodyInput(melodyInput: string) {\n    this.setState({\n      melodyInput,\n      showMelodyLengthWarning: this.parseMelodyNotes(melodyInput).length > MAX_MELODY_LENGTH,\n    });\n  }\n\n  private handleMelodyInputKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    const keyCode = e.which;\n    if (keyCode === KeyCodes.ENTER && !this.state.showMelodyLengthWarning && this.state.melodyInput.length > 0) {\n      this.handleButtonClick();\n    }\n  };\n\n  private handleButtonClick = () => {\n    const { circleOfFifthsOnly, melodyInput } = this.state;\n    const melody = this.parseMelodyNotes(melodyInput);\n    // TODO: Validate pitches.\n    this.setState({ results: harmonize(melody, circleOfFifthsOnly) });\n  };\n\n  private parseMelodyNotes(melodyString: string): MelodyNote[] {\n    // TODO: Better intepreter.\n    const tokens = melodyString.split(\" \");\n    const melodyNotes: MelodyNote[] = [];\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n      const match = token.match(PITCH_INPUT_REGEX);\n      if (match != null) {\n        const pitch = match[1].toUpperCase() as Pitch;\n        const chordName = match[3];\n        if (chordName != null) {\n          // TODO: Accept chordName instead of chord.\n          const chord = (Chord as any)[chordName] as IChord | undefined;\n          melodyNotes.push({ pitch, chord });\n        } else {\n          melodyNotes.push({ pitch });\n        }\n      } else {\n        // Invalid pitch.\n      }\n    }\n    return melodyNotes;\n  }\n\n  private getSanitizedMelodyInput(melodyInput: string): string {\n    return melodyInput.replace(\"3\", \"#\");\n  };\n\n  private maybeRenderResults() {\n    const { results } = this.state;\n    return results === undefined ? undefined : <ResultsPane results={results}></ResultsPane>;\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport { App } from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}